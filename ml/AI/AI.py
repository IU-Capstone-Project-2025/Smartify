import json

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
with open("database/dataset_with_mbti_descriptions.json", "r", encoding="utf-8") as f:
    students = json.load(f)

with open("database/professions.json", "r", encoding="utf-8") as f:
    professions = json.load(f)

# === 2. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ ===
def score_profession_normalized(student, profession):
    total_score = 0
    reasons, negatives = [], []

    subj_scores = student["subject_scores"]
    required_subjects = [s.replace(" (–±–∞–∑–æ–≤—ã–π)", "").replace(" (–ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π)", "").strip() for s in profession["ege_subjects"]]
    max_subj_score = len(required_subjects) * 5  # –º–∞–∫—Å. –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º

    # === 1) –ü—Ä–µ–¥–º–µ—Ç—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏ (35%) ===
    subj_sum = 0
    matched_subjects = []
    for subj in required_subjects:
        mark = subj_scores.get(subj)
        if mark:
            subj_sum += mark
            matched_subjects.append(f"{subj} ({mark})")
            if mark <= 2:
                negatives.append(f"{subj} ‚Äî –Ω–∏–∑–∫–∏–π –±–∞–ª–ª ({mark})")
        else:
            negatives.append(f"{subj} ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–∞—Ö")

    if matched_subjects:
        reasons.append(f"–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –æ—Ü–µ–Ω–∫–∏: {', '.join(matched_subjects)}")

    subj_score_norm = (subj_sum / max_subj_score) if max_subj_score else 0
    total_score += subj_score_norm * 35

    # === 2) MBTI (20%) ===
    mbti_match = student["mbti_type"]["code"] in profession["mbti_types"].replace(" ", "").split(",")
    if mbti_match:
        reasons.append(f"–¢–≤–æ–π MBTI ({student['mbti_type']['code']}) –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —ç—Ç—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é.")
        total_score += 20
    else:
        negatives.append(f"MBTI {student['mbti_type']['code']} –º–æ–∂–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–∏–ø–∏—á–Ω—ã–º–∏ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.")

    # === 3) –ò–Ω—Ç–µ—Ä–µ—Å—ã (15%) ===
    interest_match = set(student["interests"]) & set(profession.get("interests", []))
    interest_score = len(interest_match) / len(profession.get("interests", []) or [1])
    if interest_match:
        reasons.append(f"–ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: {', '.join(interest_match)}.")
    total_score += interest_score * 15

    # === 4) –¶–µ–Ω–Ω–æ—Å—Ç–∏ (15%) ===
    value_match = set(student["values"]) & set(profession.get("values", []))
    value_score = len(value_match) / len(profession.get("values", []) or [1])
    if value_match:
        reasons.append(f"–¶–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {', '.join(value_match)}.")
    total_score += value_score * 15

    # === 5) –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ä–æ–ª–∏, –º–µ—Å—Ç–∞, —Å—Ç–∏–ª—è (10%) ===
    pref = student["work_preferences"]
    match_count = 0
    for k in ["role", "place", "style"]:
        if profession.get(k) == pref.get(k):
            match_count += 1
            reasons.append(f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ {k} —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {profession[k]}")
    total_score += (match_count / 3) * 10

    # === 6) –ò—Å–∫–ª—é—á–µ–Ω–∏—è: -25% –∑–∞ –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç ===
    for ex in pref.get("exclude", []):
        if ex in profession.get("interests", []) or ex in profession.get("role", ""):
            total_score -= 25
            negatives.append(f"–¢—ã —Ö–æ—á–µ—à—å –∏–∑–±–µ–∂–∞—Ç—å: {ex}, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç!")

    # === 7) –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ ===
    total_score = max(min(total_score, 100), 0)

    return round(total_score, 2), reasons, negatives

# === 3. –ó–∞–ø—É—Å–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ ===
student = students[4]  # –ò–ª–∏ —Ü–∏–∫–ª –ø–æ –≤—Å–µ–º

scored = []
for prof in professions:
    score, pos, neg = score_profession_normalized(student, prof)
    scored.append({
        "name": prof["name"],
        "score": score,
        "positives": pos,
        "negatives": neg,
        "desc": prof["description"]
    })

# === 4. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ç–æ–ø-5 ===
scored.sort(key=lambda x: x["score"], reverse=True)
top5 = scored[:5]

# === 5. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
for i, p in enumerate(top5, 1):
    print(f"\n#{i} ‚Äî {p['name']} ({p['score']}%)")
    print("‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ:")
    for pos in p["positives"]:
        print(f"  - {pos}")
    if p["negatives"]:
        print("‚ö†Ô∏è –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ:")
        for neg in p["negatives"]:
            print(f"  - {neg}")
    print(f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {p['desc']}\n")
    print("-" * 60)
