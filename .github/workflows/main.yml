name: Smartify CI/CD

on:
  push:
    branches:
      - main
      - Back
  pull_request:
    branches:
      - main

jobs:
  
  build_and_deploy:
    #needs: test
    runs-on: [self-hosted]

    env:
      REMOTE_HOST: 213.226.112.206
      REMOTE_USER: ghrunner
      APP_DIR: /pro/smartify

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.32.4

      - name: Install dependencies
        run: flutter pub get
        working-directory: ./frontend

      - name: Build web
        run: |
          flutter create .
          flutter build web --base-href /smartify/
        working-directory: ./frontend

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/build/web

      - name: Setup SSH client
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

      - name: Create .env.production from secret
        run: |
          echo "${{ secrets.ENV_PRODUCTION }}" > .env.production

      - name: Copy application files to remote server
        run: |
          ssh $REMOTE_USER@$REMOTE_HOST " rm -rf ${APP_DIR}/* && mkdir -p ${APP_DIR}"
          scp -r .env.production $REMOTE_USER@$REMOTE_HOST:${APP_DIR}
          scp -r docker-compose.yml $REMOTE_USER@$REMOTE_HOST:${APP_DIR}
          scp -r backend/ $REMOTE_USER@$REMOTE_HOST:${APP_DIR}
          scp -r database/ $REMOTE_USER@$REMOTE_HOST:${APP_DIR}
          scp -r ml/ $REMOTE_USER@$REMOTE_HOST:${APP_DIR}
          scp -r frontend/ $REMOTE_USER@$REMOTE_HOST:${APP_DIR}

      - name: Build and deploy Docker containers on remote server
        run: |
          ssh $REMOTE_USER@$REMOTE_HOST "
            export COMPOSE_PROJECT_NAME=smartify_prod
            cd ${APP_DIR} &&
            docker-compose build --no-cache &&
            docker-compose up -d
          "
          echo "Deployment completed on $REMOTE_HOST"

      - name: Clean up SSH key
        if: always()
        run: rm -f ~/.ssh/id_rsa
